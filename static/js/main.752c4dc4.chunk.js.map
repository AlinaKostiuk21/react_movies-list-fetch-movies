{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","api.ts","components/FindMovie/FindMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","props","movie","className","src","Poster","alt","Title","Plot","MoviesList","movies","map","imdbID","BASE_URL","getMovie","searchMovie","url","fetch","then","response","ok","Error","status","statusText","json","FindMovie","addMovie","useState","query","setQuery","visibleMovie","setMovie","visibleEror","setEror","onSubmit","event","preventDefault","htmlFor","type","id","placeholder","value","onChange","target","onClick","Response","App","setMovies","some","film","state","ReactDOM","render","document","getElementById"],"mappings":"6TAQaA,EAA6B,SAACC,GACzC,IAAQC,EAAUD,EAAVC,MAER,OACE,sBAAKC,UAAU,OAAf,UACE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,gBAAlB,SACE,qBACEC,IAAKF,EAAMG,OACXC,IAAI,kBAIV,sBAAKH,UAAU,eAAf,UACE,sBAAKA,UAAU,QAAf,UACE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,iBAAlB,SACE,qBACEC,IAAI,wBACJE,IAAI,aAIV,qBAAKH,UAAU,gBAAf,SACE,mBAAGA,UAAU,aAAb,SAA2BD,EAAMK,aAIrC,sBAAKJ,UAAU,UAAf,UACGD,EAAMM,KACP,iCC7BGC,EAA8B,SAACR,GAC1C,IAAQS,EAAWT,EAAXS,OAER,OACE,qBAAKP,UAAU,SAAf,SACGO,EAAOC,KAAI,SAAAT,GAAK,OACf,cAAC,EAAD,CAEEA,MAAOA,GADFA,EAAMU,cCffC,G,MAAQ,0CADE,WACF,QAaDC,EAAW,SAACC,GACvB,OAZeC,EAYA,GAAD,OAAID,GAXXE,MAAM,GAAD,OAAIJ,GAAJ,OAAeG,IACxBE,MAAK,SAAAC,GACJ,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAJ,UAAaF,EAASG,OAAtB,cAAkCH,EAASI,aAGnD,OAAOJ,EAASK,UAPN,IAACR,GCOJS,EAA4B,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC1C,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAiCF,mBAAS,MAA1C,mBAAOG,EAAP,KAAqBC,EAArB,KACA,EAA+BJ,oBAAS,GAAxC,mBAAOK,EAAP,KAAoBC,EAApB,KA0BA,OACE,qCACE,uBAAM9B,UAAU,aAAa+B,SAVT,SAACC,GACvBA,EAAMC,iBACFN,IACFJ,EAASI,GACTD,EAAS,MAMT,UACE,sBAAK1B,UAAU,QAAf,UACE,qBAAKA,UAAU,UAAf,SACE,wBAAOA,UAAU,QAAQkC,QAAQ,cAAjC,wBAEE,uBACEC,KAAK,OACLC,GAAG,cACHC,YAAY,0BACZrC,UAAU,kBACVsC,MAAOb,EACPc,SArCQ,SAACP,GACrBN,EAASM,EAAMQ,OAAOF,eAwCfT,GACC,mBAAG7B,UAAU,iBAAb,qDAMJ,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,UAAf,SACE,wBACEmC,KAAK,SACLnC,UAAU,kBACVyC,QAjDQ,WAClB9B,EAASc,GAAOV,MAAK,SAAAhB,GACI,UAAnBA,EAAM2C,UACRZ,GAAQ,GACRF,EAAS,QAETE,GAAQ,GACRF,EAAS7B,QAuCL,4BASF,qBAAKC,UAAU,UAAf,SACE,wBACEmC,KAAK,SACLnC,UAAU,oBAFZ,qCAUN,qBAAKA,UAAU,YAAf,SACG2B,GACC,qCACE,oBAAI3B,UAAU,QAAd,qBACA,cAAC,EAAD,CAAWD,MAAO4B,aCnFvB,SAASgB,IACd,MAA4BnB,mBAAkB,IAA9C,mBAAOjB,EAAP,KAAeqC,EAAf,KAQA,OACE,sBAAK5C,UAAU,OAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CAAYO,OAAQA,MAEtB,qBAAKP,UAAU,UAAf,SACE,cAAC,EAAD,CAAWuB,SAZA,SAACxB,GACXQ,EAAOsC,MAAK,SAAAC,GAAI,OAAIA,EAAKrC,SAAWV,EAAMU,WAC7CmC,GAAU,SAACG,GAAD,4BAAgBA,GAAhB,CAAuBhD,eCPvCiD,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.752c4dc4.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\nimport { Movie } from '../../react-app-env';\n\ntype Props = {\n  movie: Movie;\n};\n\nexport const MovieCard: React.FC<Props> = (props) => {\n  const { movie } = props;\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-image\">\n        <figure className=\"image is-4by3\">\n          <img\n            src={movie.Poster}\n            alt=\"Film logo\"\n          />\n        </figure>\n      </div>\n      <div className=\"card-content\">\n        <div className=\"media\">\n          <div className=\"media-left\">\n            <figure className=\"image is-48x48\">\n              <img\n                src=\"images/imdb-logo.jpeg\"\n                alt=\"imdb\"\n              />\n            </figure>\n          </div>\n          <div className=\"media-content\">\n            <p className=\"title is-8\">{movie.Title}</p>\n          </div>\n        </div>\n\n        <div className=\"content\">\n          {movie.Plot}\n          <br />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../react-app-env';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = (props) => {\n  const { movies } = props;\n\n  return (\n    <div className=\"movies\">\n      {movies.map(movie => (\n        <MovieCard\n          key={movie.imdbID}\n          movie={movie}\n        />\n      ))}\n    </div>\n  );\n};\n","const API_KEY = '91e1c690';\nconst BASE_URL = `https://www.omdbapi.com/?apikey=${API_KEY}&t=`;\n\nconst request = (url: string) => {\n  return fetch(`${BASE_URL}${url}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n};\n\nexport const getMovie = (searchMovie: string) => {\n  return request(`${searchMovie}`);\n};\n","import React, { useState } from 'react';\nimport './FindMovie.scss';\nimport { getMovie } from '../../api';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../react-app-env';\n\ninterface Props {\n  addMovie: (movie: Movie) => void\n}\n\nexport const FindMovie:React.FC<Props> = ({ addMovie }) => {\n  const [query, setQuery] = useState('');\n  const [visibleMovie, setMovie] = useState(null);\n  const [visibleEror, setEror] = useState(false);\n\n  const onChangeQuery = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    setQuery(event.target.value);\n  };\n\n  const submitSerch = () => {\n    getMovie(query).then(movie => {\n      if (movie.Response === 'False') {\n        setEror(true);\n        setMovie(null);\n      } else {\n        setEror(false);\n        setMovie(movie);\n      }\n    });\n  };\n\n  const addVisibleMovie = (event: React.FormEvent<Element>) => {\n    event.preventDefault();\n    if (visibleMovie) {\n      addMovie(visibleMovie);\n      setQuery('');\n    }\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\" onSubmit={addVisibleMovie}>\n        <div className=\"field\">\n          <div className=\"control\">\n            <label className=\"label\" htmlFor=\"movie-title\">\n              Movie title\n              <input\n                type=\"text\"\n                id=\"movie-title\"\n                placeholder=\"Enter a title to search\"\n                className=\"input is-danger\"\n                value={query}\n                onChange={onChangeQuery}\n              />\n            </label>\n          </div>\n          {visibleEror && (\n            <p className=\"help is-danger\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-light\"\n              onClick={submitSerch}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"submit\"\n              className=\"button is-primary\"\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n\n      <div className=\"container\">\n        {visibleMovie && (\n          <>\n            <h2 className=\"title\">Preview</h2>\n            <MovieCard movie={visibleMovie} />\n          </>\n        )}\n      </div>\n    </>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './react-app-env';\n\nexport function App() {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const addMovie = (movie: Movie) => {\n    if (!movies.some(film => film.imdbID === movie.imdbID)) {\n      setMovies((state) => ([...state, movie]));\n    }\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie addMovie={addMovie} />\n      </div>\n    </div>\n  );\n}\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}